-- Monster Tracker Database Schema - STARTMALL
-- SQLite 3.x compatible
-- Database normalization: 3NF (Third Normal Form)
-- Created for Campus M칬lndal - Databashantering och design

-- ==================================================
-- VIKTIGT: Foreign Key support i SQLite
-- ==================================================
-- SQLite har FK support AVST츿NGD som standard!
-- Du m친ste aktivera det n칛r du 칬ppnar connection:
--   PRAGMA foreign_keys = ON;
-- G칬r detta i din C#-kod vid varje connection.
-- ==================================================

-- ==================================================
-- Skapa dina tabeller h칛r
-- ==================================================

-- Tips f칬r att komma ig친ng:
-- 1. B칬rja med Monster-tabellen (den har inga dependencies)
-- 2. Skapa Location och Hunter (de har heller inga dependencies)
-- 3. Skapa Observation sist (den beror p친 de andra tre)

-- ==================================================
-- Exempel p친 CREATE TABLE-syntax:
-- ==================================================
-- CREATE TABLE TableName (
--     Id INTEGER PRIMARY KEY AUTOINCREMENT,
--     ColumnName TEXT NOT NULL,
--     AnotherColumn TEXT
-- );

-- ==================================================
-- Monster-tabellen
-- ==================================================
-- Ska inneh친lla:
-- - Id (INTEGER, PRIMARY KEY, AUTOINCREMENT)
-- - Name (TEXT, NOT NULL)
-- - Type (TEXT, NOT NULL)
-- - DangerLevel (TEXT, NOT NULL)
--
-- Tips: Anv칛nd CHECK constraint f칬r DangerLevel
-- CHECK(DangerLevel IN ('Low', 'Medium', 'High', 'Extreme'))

-- Din kod h칛r:
CREATE TABLE Monster (
    Id INTEGER PRIMARY KEY AUTOINCREMENT,
    Name TEXT NOT NULL,
    Type TEXT NOT NULL,
    DangerLevel TEXT NOT NULL CHECK(DangerLevel IN ('Low', 'Medium', 'High', 'Extreme'))
);

-- ==================================================
-- Location-tabellen
-- ==================================================
-- Ska inneh친lla:
-- - Id (INTEGER, PRIMARY KEY, AUTOINCREMENT)
-- - Name (TEXT, NOT NULL, UNIQUE)
-- - Region (TEXT, NOT NULL)
-- - Coordinates (TEXT, nullable)

-- Din kod h칛r:
CREATE TABLE Location (
    Id INTEGER PRIMARY KEY AUTOINCREMENT,
    Name TEXT NOT NULL UNIQUE,
    Region TEXT NOT NULL,
    Coordinates TEXT nullable
);

-- ==================================================
-- Hunter-tabellen
-- ==================================================
-- Ska inneh친lla:
-- - Id (INTEGER, PRIMARY KEY, AUTOINCREMENT)
-- - Name (TEXT, NOT NULL, UNIQUE)
-- - ExperienceLevel (TEXT, NOT NULL)
--
-- Tips: Anv칛nd CHECK constraint f칬r ExperienceLevel
-- CHECK(ExperienceLevel IN ('Rookie', 'Intermediate', 'Expert', 'Master'))

-- Din kod h칛r:
CREATE TABLE Hunter (
    Id INTEGER PRIMARY KEY AUTOINCREMENT,
    Name TEXT NOT NULL UNIQUE,
    ExperienceLevel TEXT NOT NULL,
    Coordinates TEXT, nullable CHECK(ExperienceLevel IN ('Rookie', 'Intermediate', 'Expert', 'Master'))
);



-- ==================================================
-- Observation-tabellen (VIKTIGAST - kopplingsstabell!)
-- ==================================================
-- Ska inneh친lla:
-- - Id (INTEGER, PRIMARY KEY, AUTOINCREMENT)
-- - MonsterId (INTEGER, NOT NULL)
-- - LocationId (INTEGER, NOT NULL)
-- - HunterId (INTEGER, NOT NULL)
-- - Description (TEXT, nullable)
-- - DateSeen (TEXT, NOT NULL) -- ISO 8601: YYYY-MM-DD
--
-- FOREIGN KEY constraints kr칛vs h칛r!
-- FOREIGN KEY(MonsterId) REFERENCES Monster(Id)
-- FOREIGN KEY(LocationId) REFERENCES Location(Id)
-- FOREIGN KEY(HunterId) REFERENCES Hunter(Id)
--
-- Tips: Anv칛nd ON DELETE RESTRICT f칬r att f칬rhindra
-- radering av monster/location/hunter som har observationer

-- Din kod h칛r:
-- mall fr친n https://campusmolndaleducation.github.io/csharp_cmyh/C-Sharp/databases/sql/constraints/
CREATE TABLE Observation (
    Id      INTEGER PRIMARY KEY AUTOINCREMENT,
    MonsterId   INTEGER NOT NULL,
    LocationId   INTEGER NOT NULL,
    HunterId   INTEGER NOT NULL,
    Description  TEXT, nullable,
    DateSeen  TEXT NOT NULL,
    FOREIGN KEY (MonsterId)
        REFERENCES Monster(Id)
        ON DELETE RESTRICT
    FOREIGN KEY (LocationId)
        REFERENCES Location(Id)
        ON DELETE RESTRICT
    FOREIGN KEY (HunterId)
        REFERENCES Hunter(Id)
        ON DELETE RESTRICT
);


-- ==================================================
-- VG: Indexes f칬r b칛ttre performance (frivilligt)
-- ==================================================
-- Om du vill optimera din databas kan du l칛gga till indexes
-- f칬r kolumner som ofta anv칛nds i WHERE-klausuler eller JOINs:
--
-- CREATE INDEX idx_monster_type ON Monster(Type);
-- CREATE INDEX idx_observation_dateseen ON Observation(DateSeen);
-- etc.

-- ==================================================
-- Testa ditt schema
-- ==================================================
-- N칛r du k칬rt detta script, testa att:
-- 1. Alla tabeller finns: SELECT name FROM sqlite_master WHERE type='table';
-- 2. FK-constraints fungerar: F칬rs칬k skapa observation med ogiltigt MonsterId
-- 3. 3NF-efterlevnad: Finns n친gon duplicerad information mellan tabeller?

-- ==================================================
-- 3NF Checklista
-- ==================================================
-- [ ] 1NF: Alla kolumner inneh친ller atom칛ra v칛rden (inga kommaseparerade listor)
-- [ ] 2NF: Inga partiella beroenden (alla attribut beror p친 HELA prim칛rnyckeln)
-- [ ] 3NF: Inga transitiva beroenden
--     (Monster-info finns ENDAST i Monster, inte duplicerad i Observation)
--
-- Exempel p친 FEL design (bryter mot 3NF):
-- CREATE TABLE Observation (
--     Id INTEGER PRIMARY KEY,
--     MonsterId INTEGER,
--     MonsterName TEXT,  -- FEL! Detta beror p친 MonsterId, inte Observation.Id
--     MonsterType TEXT   -- FEL! Detta beror p친 MonsterId, inte Observation.Id
-- );
--
-- R츿TT design:
-- - Monster-info finns ENDAST i Monster-tabellen
-- - Observation har bara MonsterId (FK)
-- - Anv칛nd JOIN n칛r du beh칬ver visa monstrets namn
-- ==================================================

-- Lycka till! 游붆
