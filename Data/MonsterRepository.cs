using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.Linq;
using System.Threading.Tasks;

namespace assignment_sql_81clafra.Data
{
    // Hanterar endast Monster-relaterade databasoperationer
    public class MonsterRepository
    {
        // Implementera CRUD-metoder här
        // Create, GetAll, GetById, Update, Delete

        static void CreateMonster()
        {
            Console.WriteLine("\n--- Lägg till nytt monster ---");

            // 1. Fråga användaren efter namn
            Console.Write("Namn: ");
            string? name = Console.ReadLine();

            // 2. Fråga användaren efter typ av monster
            Console.Write("Typ: ");
            string? type = Console.ReadLine();

            // 3. Fråga användaren efter riskgrad
            Console.Write("Typ: ");
            string? dangerLevel = Console.ReadLine();

            // 3. Skapa SQL-frågan med PARAMETRAR (inte string concatenation!)
            // Tipset: INSERT INTO Personer (Namn, Ålder) VALUES (@namn, @ålder)
            using SQLiteConnection connection = new SQLiteConnection(sqlConnectionString);

            // 4. Öppna connection, skapa command, lägg till parametrar, kör ExecuteNonQuery()
            connection.Open();

            // TODO: Does Id need to be inserted?
            string sqlCommandText = "INSERT INTO Monster (Name, Type, DangerLevel) VALUES (@name, @type, @dangerlevel)";

            using var sqlCommand = new SQLiteCommand(sqlCommandText, connection);
            sqlCommand.Parameters.AddWithValue("@name", name);
            sqlCommand.Parameters.AddWithValue("@type", type);
            sqlCommand.Parameters.AddWithValue("@dangerlevel", dangerLevel);

            sqlCommand.ExecuteNonQuery();

            // 5. Skriv ut ett be1kräftelsemeddelande

            Console.WriteLine("✅ Monster tillagt!");
        }

        static void ReadAllMonsters()
        {
            Console.WriteLine("\n--- Alla monster ---");

            using SQLiteConnection connection = new(sqlConnectionString); // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct

            // 1. Skapa SQL-frågan
            // Tipset: SELECT Id, Namn, Ålder FROM Personer
            string sqlCommandText = "SELECT Id, Name, Type, DangerLevel FROM Monster"; //  Generated by TabbyML/Qwen2.5-Coder-7B-Instruct

            // 2. Öppna connection och skapa command
            // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct
            connection.Open();
            SQLiteCommand command = connection.CreateCommand();
            command.CommandText = sqlCommandText;

            // 3. Använd ExecuteReader() för att få tillbaka en SQLiteDataReader
            // ExecuteReader() ger oss något som heter en "DataReader"
            // Det är som en pekare som går igenom alla rader i resultatet
            using SQLiteDataReader reader = command.ExecuteReader();

            // 4. Loopa igenom resultatet med while (reader.Read())
            // reader.Read() flyttar fram pekaren till nästa rad och returnerar true om det finns fler rader
            while (reader.Read()) // Generated by TabbyML/Qwen2.5-Coder-7B-Instruct
            {

                // 5. För varje rad, läs ut värdena:
                // - reader.GetInt32(0) ger första kolumnen som int (Id)
                // - reader.GetString(1) ger andra kolumnen som string (Namn)
                // - reader.GetInt32(2) ger tredje kolumnen som int (Ålder)
                // Generated by TabbyML/Qwen2.5-Coder-7B-Instruct
                int id = reader.GetInt32(0);
                string name = reader.GetString(1);
                string type = reader.GetString(2);
                string dangerLevel = reader.GetString(3);

                // 6. Skriv ut varje monster på ett snyggt sätt
                Console.WriteLine($"Id: {id}, Name: {name}, Type: {type}, Dangerlevel: {dangerLevel}"); // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct
            }

            // TIPS: Glöm inte att stänga reader när du är klar!
            // Eller använd 'using' för att det ska hända automatiskt.
        }

        static void UpdatePerson()
        {
            Console.WriteLine("\n--- Uppdatera person ---");

            // Först visar vi alla personer så användaren ser vilka som finns
            ReadAllPersons();

            // 1. Fråga vilket Id användaren vill uppdatera
            Console.Write("\nAnge Id på personen du vill uppdatera: ");

            // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct
            if (!int.TryParse(Console.ReadLine(), out int id))
            {
                Console.WriteLine("Felaktigt Id!");
                return;
            }

            // 2. Fråga efter nytt namn
            Console.Write("Nytt namn: ");
            string? newName = Console.ReadLine();

            // 3. Fråga efter ny ålder
            Console.Write("Ny ålder: ");

            // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct
            if (!int.TryParse(Console.ReadLine(), out int newAge))
            {
                Console.WriteLine("Felaktig ålder!");
                return;
            }

            // 4. Skapa SQL-frågan med parametrar
            // Tipset: UPDATE Personer SET Namn = @namn, Ålder = @ålder WHERE Id = @id
            string sqlCommandText = "UPDATE Personer SET Namn = @name, Ålder = @age WHERE Id = @id";

            // 5. Öppna connection, skapa command, lägg till parametrar, kör ExecuteNonQuery()
            using SQLiteConnection connection = new(sqlConnectionString); // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct
            connection.Open();
            using (SQLiteCommand command = connection.CreateCommand()) // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct
            {
                command.CommandText = sqlCommandText;

                // Generated by TabbyML/Qwen2.5-Coder-7B-Instruct
                command.Parameters.AddWithValue("@name", newName);
                command.Parameters.AddWithValue("@age", newAge);
                command.Parameters.AddWithValue("@id", id);

                // 6. ExecuteNonQuery() returnerar antalet påverkade rader
                // Om det är 0 betyder det att inget hittades med det Id:t

                int affectedRows = command.ExecuteNonQuery();
                if (affectedRows == 0)
                {
                    Console.WriteLine("❌ Inget person med Id " + id + " hittades");
                    return;
                }
                else
                {
                    Console.WriteLine("✅ Person uppdaterad!");
                    return;
                }
            }
        }

        static void DeletePerson()
        {
            Console.WriteLine("\n--- Ta bort person ---");

            // Visa alla personer först
            ReadAllPersons();

            // 1. Fråga vilket Id användaren vill ta bort
            Console.Write("\nAnge Id på personen du vill ta bort: ");

            if (!int.TryParse(Console.ReadLine(), out int id))
            {
                Console.WriteLine("Felaktigt id!");
                return;
            }


            // 2. Fråga om användaren är säker (säkerhetscheck!)
            Console.Write($"Är du säker på att du vill ta bort person med Id {id}? (ja/nej): ");
            string answer = Console.ReadLine();

            if (answer.ToLower() != "ja")
            {
                Console.WriteLine("Avbrutet!");
                return;
            }

            // 3. Skapa SQL-frågan med parameter
            // Tipset: DELETE FROM Personer WHERE Id = @id
            string sqlCommandText = "DELETE FROM Personer WHERE Id = @id"; // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct

            // 4. Öppna connection, skapa command, lägg till parameter, kör ExecuteNonQuery()

            using (SQLiteConnection connection = new(sqlConnectionString))
            {
                connection.Open();

                using (SQLiteCommand command = connection.CreateCommand()) // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct
                {
                    command.CommandText = sqlCommandText;

                    command.Parameters.AddWithValue("@id", id); // Generated by TabbyML/Qwen2.5-Coder-7B-Instruct

                    command.ExecuteNonQuery();
                }
            }
            Console.WriteLine("✅ Person borttagen!");
        }
    }
}
