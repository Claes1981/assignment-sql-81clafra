using System.Data.SQLite;
using assignment_sql_81clafra.Models;

namespace assignment_sql_81clafra.Data
{
    public class HunterRepository
    {
        // Implementera CRUD-metoder här
        // Create, GetAll, GetById, Update, Delete

        // Corrected with help from Perplexity, https://www.perplexity.ai/search/why-do-i-get-this-error-messag-OnsK_24mQm.TzjLBsttzgQ#0
        public void CreateHunter(Models.Hunter hunter)
        {
            // 3. Skapa SQL-frågan med PARAMETRAR (inte string concatenation!)
            // Tipset: INSERT INTO Personer (Namn, Ålder) VALUES (@namn, @ålder)
            // 4. Öppna connection, skapa command, lägg till parametrar, kör ExecuteNonQuery()
            using SQLiteConnection connection = DatabaseConnection.GetConnection(); // Generated with help from Perplexity, https://www.perplexity.ai/search/why-do-i-get-this-error-messag-Qt5RQfY7Swmk189g7bwlhw#0 

            // TODO: Does Id need to be inserted?
            string sqlCommandText = "INSERT INTO Hunter (Name, ExperienceLevel) VALUES (@name, @experiencelevel)";

            using var sqlCommand = new SQLiteCommand(sqlCommandText, connection);
            sqlCommand.Parameters.AddWithValue("@name", hunter.Name);
            sqlCommand.Parameters.AddWithValue("@experiencelevel", hunter.ExperienceLevel);

            sqlCommand.ExecuteNonQuery();


        }

        public List<Hunter> ReadAllHunters()
        {

            using SQLiteConnection connection = DatabaseConnection.GetConnection(); // Generated with help from Perplexity, https://www.perplexity.ai/search/why-do-i-get-this-error-messag-Qt5RQfY7Swmk189g7bwlhw#0 

            // 1. Skapa SQL-frågan
            // Tipset: SELECT Id, Namn, Ålder FROM Personer
            string sqlCommandText = "SELECT Id, Name, ExperienceLevel FROM Hunter"; //  Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct

            // 2. Öppna connection och skapa command

            // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct
            using SQLiteCommand command = connection.CreateCommand();
            command.CommandText = sqlCommandText;

            // 3. Använd ExecuteReader() för att få tillbaka en SQLiteDataReader
            // ExecuteReader() ger oss något som heter en "DataReader"
            // Det är som en pekare som går igenom alla rader i resultatet
            using SQLiteDataReader reader = command.ExecuteReader();

            List<Hunter> hunters = new List<Hunter>();

            // 4. Loopa igenom resultatet med while (reader.Read())
            // reader.Read() flyttar fram pekaren till nästa rad och returnerar true om det finns fler rader
            while (reader.Read()) // Generated by TabbyML/Qwen2.5-Coder-7B-Instruct
            {

                // 5. För varje rad, läs ut värdena:
                // - reader.GetInt32(0) ger första kolumnen som int (Id)
                // - reader.GetString(1) ger andra kolumnen som string (Namn)
                // - reader.GetInt32(2) ger tredje kolumnen som int (Ålder)
                // Generated by TabbyML/Qwen2.5-Coder-7B-Instruct
                int id = reader.GetInt32(0);
                string name = reader.GetString(1);
                string experienceLevel = reader.GetString(2);

                // 6. Skapa ett Hunter-objekt och lägg det i listan
                Hunter hunter = new Hunter(id, name, experienceLevel);
                hunters.Add(hunter);
            }

            // TIPS: Glöm inte att stänga reader när du är klar!
            // Eller använd 'using' för att det ska hända automatiskt.

            return hunters;
        }

        public void UpdateHunter(Hunter hunterToUpdate)
        {
            // 4. Skapa SQL-frågan med parametrar
            // Tipset: UPDATE Personer SET Namn = @namn, Ålder = @ålder WHERE Id = @id
            string sqlCommandText = "UPDATE Hunter SET Name = @name, ExperienceLevel = @experiencelevel WHERE Id = @id";

            // 5. Öppna connection, skapa command, lägg till parametrar, kör ExecuteNonQuery()
            using SQLiteConnection connection = DatabaseConnection.GetConnection(); // Generated with help fron Perplexity, https://www.perplexity.ai/search/why-do-i-get-this-error-messag-Qt5RQfY7Swmk189g7bwlhw#0 

            using (SQLiteCommand command = connection.CreateCommand()) // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct
            {
                command.CommandText = sqlCommandText;

                // Generated by TabbyML/Qwen2.5-Coder-7B-Instruct
                command.Parameters.AddWithValue("@name", hunterToUpdate.Name);
                command.Parameters.AddWithValue("@experiencelevel", hunterToUpdate.ExperienceLevel);
                command.Parameters.AddWithValue("@id", hunterToUpdate.Id);

                // 6. ExecuteNonQuery() returnerar antalet påverkade rader
                // Om det är 0 betyder det att inget hittades med det Id:t

                int affectedRows = command.ExecuteNonQuery();

            }
        }

        public void DeleteHunter(Hunter hunter)
        {
            // 3. Skapa SQL-frågan med parameter
            // Tipset: DELETE FROM Personer WHERE Id = @id
            string sqlCommandText = "DELETE FROM Hunter WHERE Id = @id"; // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct

            // 4. Öppna connection, skapa command, lägg till parameter, kör ExecuteNonQuery()

            using SQLiteConnection connection = DatabaseConnection.GetConnection(); // Generated with help fron Perplexity, https://www.perplexity.ai/search/why-do-i-get-this-error-messag-Qt5RQfY7Swmk189g7bwlhw#0 
            {
                using (SQLiteCommand command = connection.CreateCommand()) // Generated with help from TabbyML/Qwen2.5-Coder-7B-Instruct
                {
                    command.CommandText = sqlCommandText;

                    command.Parameters.AddWithValue("@id", hunter.Id); // Generated by TabbyML/Qwen2.5-Coder-7B-Instruct

                    command.ExecuteNonQuery();
                }
            }
        }
    }
}