using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using assignment_sql_81clafra.Data;
using assignment_sql_81clafra.Models;

namespace assignment_sql_81clafra.Services
{
    // Code skeleton from https://github.com/Campus-Molndal-CLO25/Studiematerial/blob/main/2_databases/assignment/part_1/monster_tracker.md
    public class MonsterTrackerFacade
    {
        private MonsterRepository _monsterRepo;
        private LocationRepository _locationRepo;
        private HunterRepository _hunterRepo;
        private ObservationRepository _observationRepo;

        public MonsterTrackerFacade()
        {
            // Generated by by TabbyML/Qwen2.5-Coder-7B-Instruct
            _monsterRepo = new MonsterRepository();
            _locationRepo = new LocationRepository();
            _hunterRepo = new HunterRepository();
            _observationRepo = new ObservationRepository();
        }

        // Enkla operationer som delegerar till repositories
        public void CreateDatabase()
        {
            DatabaseCreation databaseCreationObject = new DatabaseCreation(); // With help from Perplexity, https://www.perplexity.ai/search/can-you-help-me-with-this-erro-1Vj.QVQzSbOfN8bbixFCdg#0
            databaseCreationObject.CreateDatabase();
        }

        public void AddMonster(string name, string type, string dangerLevel)
        {
            var monster = new Monster { Name = name, Type = type, DangerLevel = dangerLevel };
            _monsterRepo.CreateMonster(monster);
        }

        public List<Monster> GetAllMonsters()
        {
            return _monsterRepo.ReadAllMonsters();
        }

        public void UpdateMonster(int idToUpdate, string? newName, string? newType, string? newDangerLevel)
        {
            var monsterToUpdate = new Monster { Id = idToUpdate, Name = newName, Type = newType, DangerLevel = newDangerLevel };
            _monsterRepo.UpdateMonster(monsterToUpdate);
        }

        public void DeleteMonster(int idToDelete)
        {
            var monsterToDelete = new Monster { Id = idToDelete };
            _monsterRepo.DeleteMonster(monsterToDelete);
        }

        public void AddLocation(string name, string region)
        {
            var location = new Location { Name = name, Region = region };
            _locationRepo.CreateLocation(location);
        }

        public List<Location> GetAllLocations()
        {
            return _locationRepo.ReadAllLocations();
        }

        public void UpdateLocation(int idToUpdate, string? newName, string? newRegion)
        {
            var locationToUpdate = new Location { Id = idToUpdate, Name = newName, Region = newRegion };
            _locationRepo.UpdateLocation(locationToUpdate);
        }

        public void DeleteLocation(int idToDelete)
        {
            var locationToDelete = new Location { Id = idToDelete };
            _locationRepo.DeleteLocation(locationToDelete);
        }

        public void AddHunter(string name, string experienceLevel)
        {
            var hunter = new Hunter { Name = name, ExperienceLevel = experienceLevel };
            _hunterRepo.CreateHunter(hunter);
        }

        public List<Hunter> GetAllHunters()
        {
            return _hunterRepo.ReadAllHunters();
        }

        public void UpdateHunter(int idToUpdate, string? newName, string? newExperienceLevel)
        {
            var hunterToUpdate = new Hunter { Id = idToUpdate, Name = newName, ExperienceLevel = newExperienceLevel };
            _hunterRepo.UpdateHunter(hunterToUpdate);
        }

        public void DeleteHunter(int idToDelete)
        {
            var hunterToDelete = new Hunter { Id = idToDelete };
            _hunterRepo.DeleteHunter(hunterToDelete);
        }

        public void AddObservation(int monsterId, int locationId, int hunterId, string description, string dateSeen)
        {
            var observation = new Observation { MonsterId = monsterId, LocationId = locationId, HunterId = hunterId, Description=description, DateSeen=dateSeen };
            _observationRepo.CreateObservation(observation);
        }

        public List<Observation> GetAllObservations()
        {
            return _observationRepo.ReadAllObservations();
        }

        public void UpdateObservation(int idToUpdate, int newMonsterId, int newLocationId, int newHunterId, string? newDescription, string? newDateSeen)
        {
            var observationToUpdate = new Observation { Id = idToUpdate, MonsterId=newMonsterId, LocationId=newLocationId, HunterId=newHunterId, Description = newDescription, DateSeen = newDateSeen };
            _observationRepo.UpdateObservation(observationToUpdate);
        }

        public void DeleteObservation(int idToDelete)
        {
            var observationToDelete = new Observation { Id = idToDelete };
            _observationRepo.DeleteObservation(observationToDelete);
        }


        // Mer komplexa operationer som kombinerar flera repositories
        // public List<Observation> GetObservationsByMonsterType(string type)
        // {
        // TODO: Hämta monster av typ, sedan deras observationer
        // Detta kräver anrop till både MonsterRepository och ObservationRepository
        // }
    }
}